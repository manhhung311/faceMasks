<!DOCTYPE html>

<html>
<title>
  ỨNG DỤNG PHÁT HIỆN NGƯỜI ĐEO KHẨU TRANG
</title>

<head>
  <script async src="https://docs.opencv.org/master/opencv.js" type="text/javascript"></script>
  <script src="https://docs.opencv.org/master/utils.js " type="text/javascript"></script>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.14.0/dist/tf.min.js"></script>

  <script type='text/javascript'>
    var netDet = undefined;

    // Phát hiện khuân mặt
    function detectFaces(img) {
      var blob = cv.blobFromImage(img, 1, { width: 192, height: 144 }, [104, 117, 123, 0], false, false);
      netDet.setInput(blob);
      var out = netDet.forward();

      var faces = [];
      for (var i = 0, n = out.data32F.length; i < n; i += 7) {
        var confidence = out.data32F[i + 2];
        var left = out.data32F[i + 3] * img.cols;
        var top = out.data32F[i + 4] * img.rows;
        var right = out.data32F[i + 5] * img.cols;
        var bottom = out.data32F[i + 6] * img.rows;
        left = Math.min(Math.max(0, left), img.cols - 1);
        right = Math.min(Math.max(0, right), img.cols - 1);
        bottom = Math.min(Math.max(0, bottom), img.rows - 1);
        top = Math.min(Math.max(0, top), img.rows - 1);

        if (confidence > 0.5 && left < right && top < bottom) {
          faces.push({ x: left, y: top, width: right - left, height: bottom - top })
        }
      }
      blob.delete();
      out.delete();
      return faces;
    };
    //


    // đường dẫn âm thanh
    var audio = new Audio("./public/etOEt.mp3")

    // trả về kết quả đeo khẩu trang hay không
    function recognize(result) {

      var bestMatchName = false;
      if (result.dataSync()[0] < 0.5) {
        bestMatchName = true;
      }
      else {
        audio.play();
      }
      return bestMatchName;
    };


    /*Tải xuống các model đã được train sẵn*/
    async function loadModels(callback) {
      var utils = new Utils('');
      var proto = 'https://raw.githubusercontent.com/opencv/opencv/4.x/samples/dnn/face_detector/deploy_lowres.prototxt';
      var weights = './modelmask/res10_300x300_ssd_iter_140000_fp16.caffemodel';
      model = await tf.loadLayersModel('./modelmask/model.json');
      modelface = await tf.loadLayersModel('./modelface/model.json')
      utils.createFileFromUrl('face_detector.prototxt', proto, () => {
        document.getElementById('status').innerHTML = 'Downloading face_detector.caffemodel';
        utils.createFileFromUrl('face_detector.caffemodel', weights, () => {
          document.getElementById('status').innerHTML = 'Downloading OpenFace model';
          netDet = cv.readNetFromCaffe('face_detector.prototxt', 'face_detector.caffemodel');
          document.getElementById('status').innerHTML = '';
          callback();
        });
      });
    };


    function main() {
      // Create a camera object.
      var output = document.getElementById('output');
      var camera = document.createElement("video");
      camera.setAttribute("width", output.width);
      camera.setAttribute("height", output.height);

      // Get a permission from user to use a camera.
      navigator.mediaDevices.getUserMedia({ video: true, audio: false })
        .then(function (stream) {
          camera.srcObject = stream;
          camera.onloadedmetadata = function (e) {
            camera.play();
          };
        });

      //! [Open a camera stream]
      var cap = new cv.VideoCapture(camera);
      var frame = new cv.Mat(camera.height, camera.width, cv.CV_8UC4);
      var frameBGR = new cv.Mat(camera.height, camera.width, cv.CV_8UC3);

      // tải các nhãn chứa tên người đã được train
      var xmlhttp = new XMLHttpRequest();
      var url = "./modelface/label.txt";
      let label = [];
      xmlhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          label = this.responseText.split('\n');
        }
      };
      xmlhttp.open("GET", url, true);
      xmlhttp.send();



      var isRunning = false;

      // xử lý hình ảnh
      function captureFrame() {
        cap.read(frame);  // Read a frame from camera
        cv.cvtColor(frame, frameBGR, cv.COLOR_RGBA2BGR);
        var faces = detectFaces(frameBGR);
        if (faces) {
          cv.imshow(output, frame);
          faces.forEach(function (rect) {
            var face = frameBGR.roi(rect);
            var faceResized = new cv.Mat(224, 224, cv.CV_8UC3);
            cv.resize(face, faceResized, { width: 224, height: 224 });
            cv.cvtColor(faceResized, faceResized, cv.COLOR_BGR2RGB);
            let tensor = tf.tensor(faceResized.data, [224, 224, 3]);
            tensor = tf.expandDims(tensor, 0);
            let result = model.predict(tensor)
            let resultface = modelface.predict(tensor);
            faceResized.delete();
            var trangThai = recognize(result);
            let numberFace = resultface.as1D().argMax().dataSync()
            if (trangThai) {
              cv.putText(frame, "Co Deo Khau Trang", { x: rect.x, y: rect.y }, cv.FONT_HERSHEY_SIMPLEX, 1.0, [0, 255, 0, 255]);
              cv.rectangle(frame, { x: rect.x, y: rect.y }, { x: rect.x + rect.width, y: rect.y + rect.height }, [0, 255, 0, 255]);
              document.getElementById("name").innerHTML = `<p>Sinh Viên Có Mã ` + label[numberFace] + ` co đeo khẩu trang </p>`;
              document.getElementById("alert").style.backgroundColor = "green";
            }
            else {
              cv.putText(frame, "Khong Deo Khau Trang", { x: rect.x, y: rect.y }, cv.FONT_HERSHEY_SIMPLEX, 1.0, [255, 0, 0, 255]);
              cv.rectangle(frame, { x: rect.x, y: rect.y }, { x: rect.x + rect.width, y: rect.y + rect.height }, [255, 0, 0, 255]);
              document.getElementById("name").innerHTML = `<p>Sinh Viên Có Mã ` + label[numberFace] + ` không đeo khẩu trang </p>`;
              document.getElementById("alert").style.backgroundColor = "red";
            }
          });
        }
        cv.imshow(output, frame);
        // Loop this function.
        if (isRunning) {
          setTimeout(captureFrame, 0);
        }
      };

      if (isRunning) {
        isRunning = false;
      } else {
        function run() {
          isRunning = true;
          captureFrame();
        }
        if (netDet == undefined) {
          loadModels(run);  // Load models and run a pipeline;
        } else {
          run();
        }
      }
    };
  </script>

  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto">

  <style>
    html,
    body {
      height: 100%;
    }

    body {
      margin: 0;
      font-family: Roboto, "Helvetica Neue", sans-serif;
      background-color: #f5f5f5;
      display: flex;
      flex-direction: column;
    }

    .bg {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      min-width: 50%;
      min-height: 50%;
      height: calc(100vh - 100px);
      margin-top: 100px;
      background-image: url('./public/background.png');
      background-position: bottom;
      background-repeat: no-repeat;
      background-size: cover;
      opacity: 0.2;
    }

    .header {
      width: 100%;
      min-height: 60px;
      background-color: white;
      display: flex;
    }

    .footer {
      width: 100%;
      min-height: 60px;
      margin-top: auto;
      font-size: 20px;
      padding: 20px 60px 0 60px;
    }

    .logo {
      height: 60px;
      width: 60px;
    }

    .header-title {
      margin: auto;
      font-size: 40px;
      font-weight: bold;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .spacer {
      flex: 1 1 auto;
    }

    .container {
      /* border: 1px solid red; */
      width: 100%;
      margin-top: 10vh;
      display: flex;
      justify-content: space-evenly;
      align-items: center;
    }

    #output {
      border: 1px solid black;
      max-width: 100%;
      background-color: gray;
      z-index: 10;
    }

    .detect-box {
      border: 1px solid black;
      background-color: white;
      height: auto;
      min-width: 400px;
      max-height: 320px;
      z-index: 10;
    }

    #alert {
      background-color: gray;
      height: 40px;
    }

    .content {
      min-height: 200px;
      padding: 16px;
      font-size: 20px;
    }

    .footer-title {
      font-size: 20px;
      font-weight: bold;
    }

    table {
      margin-top: 8px;
    }

    th {
      text-align: left;
    }

    td {
      padding-left: 10px;
    }
  </style>

</head>

<body onload="cv['onRuntimeInitialized']=()=>{ main() }">
  <div class="bg"></div>
  <div class="header">
    <image class="logo" src="./public/logo.jpg"></image>
    <span class="spacer"></span>
    <span class="header-title">ỨNG DỤNG PHÁT HIỆN NGƯỜI ĐEO KHẨU TRANG</span>
    <span class="spacer"></span>
    <div class="logo"></div>
  </div>
  <div id="status"></div>
  <div class="container">
    <canvas id="output" width=800 height=600 style="max-width: 100%"></canvas>
    <div class="detect-box">
      <div id="alert"></div>
      <div class="content" id="name">
        Thông tin người đeo khẩu trang
      </div>
    </div>
  </div>
  <div class="footer">
    <span class="footer-title">NHÓM ĐỀ TÀI NGHIÊN CỨU</span>
    <table>
      <tr>
        <th>Giảng viên hướng dẫn:</th>
        <td>Lê Thị Thu Hiền</td>
      </tr>
      <tr>
        <th>Trưởng nhóm:</th>
        <td>Lê Công Minh</td>
      </tr>
      <tr>
        <th>Thành viên:</th>
        <td>Vũ Mạnh Hùng, Đoàn Trung Huy, Nguyễn Kim Cương</td>
      </tr>
    </table>
  </div>
</body>

</html>